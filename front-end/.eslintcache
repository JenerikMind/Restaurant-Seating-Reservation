[{"C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\index.js":"1","C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\App.js":"2","C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\layout\\Layout.js":"3","C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\layout\\Routes.js":"4","C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\layout\\Menu.js":"5","C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\layout\\NotFound.js":"6","C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\dashboard\\Dashboard.js":"7","C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\utils\\useQuery.js":"8","C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\search\\Search.js":"9","C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\utils\\api.js":"10","C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\utils\\date-time.js":"11","C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\reservations\\ReservationSeat.js":"12","C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\reservations\\ReservationForm.js":"13","C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\tables\\TablesForm.js":"14","C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\layout\\ErrorAlert.js":"15","C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\tables\\TablesList.js":"16","C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\reservations\\ReservationTable.js":"17","C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\reservations\\ReservationNavigation.js":"18","C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\search\\SearchForm.js":"19","C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\utils\\format-reservation-date.js":"20","C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\buttons\\Buttons.js":"21"},{"size":286,"mtime":1634722743000,"results":"22","hashOfConfig":"23"},{"size":333,"mtime":1634722743000,"results":"24","hashOfConfig":"23"},{"size":550,"mtime":1634722743000,"results":"25","hashOfConfig":"23"},{"size":2653,"mtime":1641833325589,"results":"26","hashOfConfig":"23"},{"size":1910,"mtime":1641852180576,"results":"27","hashOfConfig":"23"},{"size":327,"mtime":1634722743000,"results":"28","hashOfConfig":"23"},{"size":1572,"mtime":1641851627629,"results":"29","hashOfConfig":"23"},{"size":361,"mtime":1634722743000,"results":"30","hashOfConfig":"23"},{"size":600,"mtime":1634722743000,"results":"31","hashOfConfig":"23"},{"size":4058,"mtime":1641849933202,"results":"32","hashOfConfig":"23"},{"size":2386,"mtime":1634722743000,"results":"33","hashOfConfig":"23"},{"size":3537,"mtime":1634722743000,"results":"34","hashOfConfig":"23"},{"size":10839,"mtime":1641845881655,"results":"35","hashOfConfig":"23"},{"size":3366,"mtime":1634722743000,"results":"36","hashOfConfig":"23"},{"size":529,"mtime":1634722743000,"results":"37","hashOfConfig":"23"},{"size":2155,"mtime":1634722743000,"results":"38","hashOfConfig":"23"},{"size":3919,"mtime":1641852788110,"results":"39","hashOfConfig":"23"},{"size":1297,"mtime":1641852029042,"results":"40","hashOfConfig":"23"},{"size":1956,"mtime":1634722743000,"results":"41","hashOfConfig":"23"},{"size":628,"mtime":1634722743000,"results":"42","hashOfConfig":"23"},{"size":1581,"mtime":1634722743000,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"ofed27",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\index.js",[],["89","90"],"C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\App.js",[],"C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\layout\\Layout.js",[],"C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\layout\\Routes.js",[],"C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\layout\\Menu.js",[],"C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\layout\\NotFound.js",[],"C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\dashboard\\Dashboard.js",["91"],"C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\utils\\useQuery.js",[],"C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\search\\Search.js",[],"C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\utils\\api.js",[],"C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\utils\\date-time.js",[],"C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\reservations\\ReservationSeat.js",[],"C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\reservations\\ReservationForm.js",["92","93","94","95"],"import React, { useState, useEffect } from \"react\";\nimport { createReservation, editReservation } from \"../utils/api\";\nimport { useHistory } from \"react-router-dom\";\nimport ErrorAlert from \"../layout/ErrorAlert\";\nimport { getReservationById } from \"../utils/api\";\nimport { useParams } from \"react-router\";\n\nimport \"./Reservations.css\";\n\nexport default function ReservationForm() {\n  const today = new Date();\n  const history = useHistory();\n\n  const [reservationsError, setReservationsError] = useState(null);\n  const [first_name, set_first_name] = useState(\"\");\n  const [last_name, set_last_name] = useState(\"\");\n  const [reservation_date, set_reservation_date] = useState(today);\n  const [reservation_time, set_reservation_time] = useState(\"17:30\");\n  const [mobile_number, set_mobile_number] = useState(\"\");\n  const [people, set_people] = useState(null);\n\n\n  const { reservation_id = null } = useParams();\n  const [existingReservation, setExistingReservation] = useState({});\n\n  const loadReservation = () => {\n    if (!reservation_id) return;\n\n    getReservationById(reservation_id)\n      .then((reservation) => {\n        const rDate = reservation.reservation_date.split(\"T\")[0];\n        set_first_name(reservation.first_name);\n        set_last_name(reservation.last_name);\n        set_reservation_date(rDate);\n        set_reservation_time(reservation.reservation_time);\n        set_mobile_number(reservation.mobile_number);\n        set_people(reservation.people);\n        setExistingReservation(reservation);\n      })\n      .catch((err) => console.log(\"there was an error: \", err));\n  };\n\n  // refreshes data on reservations upon page load\n  useEffect(loadReservation, []);\n\n  const handleNewReservationSubmit = (evt) => {\n    evt.preventDefault();\n\n    const inputs = {\n      first_name,\n      last_name,\n      reservation_date,\n      reservation_time,\n      mobile_number,\n      people,\n    };\n\n    if (validFormInputs(inputs)) {\n      // people seems to end up being cast as a string; changing it to a number here\n      inputs.people = Number(inputs.people);\n\n      if (!reservation_id) {\n        createReservation(inputs)\n          .then((feedback) => {\n            history.push(`/dashboard?date=${reservation_date}`);\n          })\n          .catch(setReservationsError);\n      } else {\n        const updatedReservation = { ...existingReservation, ...inputs };\n        editReservation(updatedReservation)\n          .then((feedback) => {\n            history.push(`/dashboard?date=${reservation_date}`);\n          })\n          .catch(setReservationsError);\n      }\n    } else {\n      return;\n    }\n  };\n\n  // sets the values dynamically as the user enters them\n  const setValues = (evt) => {\n    switch (evt.target.id) {\n      case \"first_name\":\n        set_first_name(evt.target.value);\n        break;\n      case \"last_name\":\n        set_last_name(evt.target.value);\n        break;\n      case \"reservation_date\":\n        set_reservation_date(evt.target.value);\n        break;\n      case \"reservation_time\":\n        set_reservation_time(evt.target.value);\n        break;\n      case \"mobile_number\":\n        set_mobile_number(evt.target.value);\n        break;\n      case \"people\":\n        set_people(Number(evt.target.value));\n      default:\n        break;\n    }\n  };\n\n  // if any of the inputs are incorrect, return false and display error\n  // if all inputs are correct, return true and allow posting of data\n  const validFormInputs = (inputs) => {\n    const keys = Object.keys(inputs);\n\n    for (let n = 0; n < keys.length; n++) {\n      const key = keys[n];\n      const value = inputs[key];\n      switch (key) {\n        case \"first_name\":\n          if (!value || value.length < 2) {\n            setReservationsError({\n              message:\n                \"Please provide a first name with at least two alphabetical characters\",\n            });\n            return false;\n          }\n          break;\n        case \"last_name\":\n          if (!value || value.length < 1) {\n            setReservationsError({\n              message:\n                \"Please provide a last name with at least one alphabetical character\",\n            });\n            return false;\n          }\n          break;\n        case \"reservation_date\":\n          const prospectiveDateTime = new Date(value + \"T\" + reservation_time);\n          const prospectiveYear = prospectiveDateTime.getUTCFullYear();\n          const currentYear = today.getUTCFullYear();\n          const prospectiveDate = prospectiveDateTime.getUTCDate();\n          const currentDate = today.getUTCDate();\n\n          if (prospectiveDate < currentDate && prospectiveYear <= currentYear) {\n            setReservationsError({\n              message: \"Please select a date in the future\",\n            });\n            return false;\n          }\n\n          break;\n        case \"reservation_time\":\n          const timeInQuestion = new Date(reservation_date + \" \" + value);\n          const firstReservations = new Date(\n            reservation_date + \" \" + \"10:30:00\"\n          );\n          const lastReservations = new Date(\n            reservation_date + \" \" + \"21:30:00\"\n          );\n          const timeNow = new Date();\n\n          if (timeInQuestion < timeNow) {\n            setReservationsError({\n              message: \"Please select a time in the future\",\n            });\n            return false;\n          } else if (timeInQuestion < firstReservations) {\n            setReservationsError({\n              message:\n                \"The restaurant is not accepting reservations at this hour. Please choose a time at or after 10:30am\",\n            });\n            return false;\n          } else if (timeInQuestion > lastReservations) {\n            setReservationsError({\n              message:\n                \"The restaurant is not accepting reservations at this hour. Please choose a time before 9:30pm\",\n            });\n            return false;\n          }\n          break;\n        case \"mobile_number\":\n          if (value.match(/[a-zA-Z]/)) {\n            setReservationsError({\n              message: \"Please enter a valid phone number\",\n            });\n            return false;\n          }\n\n          let mnParsed = value.split(\"\");\n          let rawMobile = \"\";\n          for (let n = 0; n < mnParsed.length; n++) {\n            if (mnParsed[n].match(/[0-9]/)) rawMobile += mnParsed[n];\n          }\n          // 10 numbers is the area code + phone number; 11 would be with the country code\n          if (rawMobile.length < 7 || rawMobile.length > 11) {\n            setReservationsError({\n              message: \"Please input a valid phone number\",\n            });\n            return false;\n          }\n\n          break;\n        default:\n          break;\n      }\n    }\n    return true;\n  };\n\n  return (\n    <div className=\"row\">\n      <div className=\"card\">\n        <div className=\"float-end\">\n          {reservation_id ? (\n            <h1>Edit Reservation</h1>\n          ) : (\n            <h1>New Reservation</h1>\n          )}\n        </div>\n        <div className=\"row\">\n          <ErrorAlert error={reservationsError} />\n        </div>\n        <hr className=\"mb-3 mt-0\" />\n        <form onSubmit={handleNewReservationSubmit}>\n          <div className=\"row\">\n            <div className=\"col-6\">\n              <div className=\"mb-3\">\n                <label htmlFor=\"first_name\">First Name</label>\n                <input\n                  name=\"first_name\"\n                  id=\"first_name\"\n                  placeholder=\"First Name\"\n                  className=\"form-control\"\n                  type=\"text\"\n                  defaultValue={first_name}\n                  required\n                  onChange={setValues}\n                />\n              </div>\n            </div>\n            <div className=\"col-6\">\n              <div className=\"mb-3\">\n                <label htmlFor=\"last_name\">Last Name</label>\n                <input\n                  name=\"last_name\"\n                  id=\"last_name\"\n                  placeholder=\"Last Name\"\n                  className=\"form-control\"\n                  type=\"text\"\n                  defaultValue={last_name}\n                  required\n                  onChange={setValues}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-6\">\n              <div className=\"mb-3\">\n                <label htmlFor=\"reservation_date\">Reservation Date</label>\n                <input\n                  name=\"reservation_date\"\n                  id=\"reservation_date\"\n                  className=\"form-control\"\n                  type=\"date\"\n                  required\n                  placeholder={reservation_date}\n                  value={reservation_date}\n                  onChange={setValues}\n                />\n              </div>\n            </div>\n            <div className=\"col-6\">\n              <div className=\"mb-3\">\n                <label htmlFor=\"reservation_time\">Reservation Time</label>\n                <input\n                  name=\"reservation_time\"\n                  id=\"reservation_time\"\n                  className=\"form-control\"\n                  type=\"time\"\n                  required\n                  defaultValue={reservation_time}\n                  onChange={setValues}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-6\">\n              <div className=\"mb-3\">\n                <label htmlFor=\"people\">Qty of Guests</label>\n                <input\n                  name=\"people\"\n                  id=\"people\"\n                  className=\"form-control\"\n                  onChange={setValues}\n                  type=\"number\"\n                  defaultValue={people}\n                ></input>\n              </div>\n            </div>\n            <div className=\"col-6\">\n              <div className=\"mb-3\">\n                <label htmlFor=\"phone\">Phone</label>\n                <input\n                  name=\"mobile_number\"\n                  id=\"mobile_number\"\n                  className=\"form-control\"\n                  placeholder={mobile_number}\n                  type=\"tel\"\n                  onChange={setValues}\n                  defaultValue={mobile_number}\n                  required\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"mb-2\">\n              <button type=\"submit\" className=\"btn btn-primary float-end\">\n                Submit\n              </button>\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary float-end\"\n                onClick={() => history.goBack()}\n              >\n                Cancel\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n","C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\tables\\TablesForm.js",[],"C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\layout\\ErrorAlert.js",[],"C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\tables\\TablesList.js",["96"],"import React, { useEffect } from \"react\";\r\nimport { resetTable } from \"../utils/api\";\r\nimport \"./tablesList.css\";\r\n\r\n// displays the tables data in a list off to the right of the page\r\nexport default function TablesList({ tables, loadDashboard, tablesError }) {\r\n  useEffect(loadDashboard, []);\r\n\r\n  async function handleFinishTable(evt) {\r\n    evt.preventDefault();\r\n\r\n    if (\r\n      window.confirm(\r\n        \"Is this table ready to seat new guests? This action cannot be undone.\"\r\n      )\r\n    ) {\r\n      // reset table logic here\r\n      const table_id = evt.target.value;\r\n      resetTable({ table_id }).then(loadDashboard).catch(tablesError);\r\n    }\r\n  }\r\n\r\n  function getListItem(table, index) {\r\n    return (\r\n      <li\r\n        className=\"list-group-item d-flex justify-content-between align-items-start \"\r\n        key={index}\r\n      >\r\n        <div className=\"ms-2 me-auto\">\r\n          <div className=\"fw-bold\">\r\n            {table.table_name} - {table.capacity}\r\n          </div>\r\n          Can hold {table.capacity} people (table id: {table.table_id})\r\n        </div>\r\n        {table.availability === \"free\" ? (\r\n          <span\r\n            className=\"badge bg-primary rounded-pill\"\r\n            data-table-id-status={table.table_id}\r\n          >\r\n            {table.availability}\r\n          </span>\r\n        ) : (\r\n          <>\r\n            <button\r\n              type=\"button\"\r\n              data-table-id-finish={table.table_id}\r\n              value={table.table_id}\r\n              className=\"btn btn-success\"\r\n              onClick={handleFinishTable}\r\n            >\r\n              finish\r\n            </button>\r\n            <span\r\n              className=\"badge bg-danger rounded-pill\"\r\n              data-table-id-status={table.table_id}\r\n            >\r\n              {table.availability}\r\n            </span>\r\n          </>\r\n        )}\r\n      </li>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-12\">\r\n        <h4>Tables List</h4>\r\n        <ul className=\"list-group list-full-width\">\r\n          {tables.map((table, index) => getListItem(table, index))}\r\n        </ul>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\reservations\\ReservationTable.js",["97"],"C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\reservations\\ReservationNavigation.js",[],"C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\search\\SearchForm.js",[],"C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\utils\\format-reservation-date.js",[],"C:\\Users\\darkh\\Documents\\GitHub\\Restaurant-Seating-Reservation\\front-end\\src\\buttons\\Buttons.js",[],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":25,"column":3,"nodeType":"104","endLine":25,"endColumn":12,"suggestions":"105"},{"ruleId":"102","severity":1,"message":"106","line":44,"column":30,"nodeType":"107","endLine":44,"endColumn":32,"suggestions":"108"},{"ruleId":"109","severity":1,"message":"110","line":101,"column":7,"nodeType":"111","messageId":"112","endLine":102,"endColumn":15},{"ruleId":"113","severity":1,"message":"114","line":151,"column":36,"nodeType":"115","messageId":"116","endLine":151,"endColumn":37},{"ruleId":"113","severity":1,"message":"114","line":154,"column":36,"nodeType":"115","messageId":"116","endLine":154,"endColumn":37},{"ruleId":"102","severity":1,"message":"103","line":7,"column":3,"nodeType":"104","endLine":7,"endColumn":12,"suggestions":"117"},{"ruleId":"102","severity":1,"message":"103","line":25,"column":5,"nodeType":"104","endLine":25,"endColumn":14,"suggestions":"118"},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadDashboard'. Either include it or remove the dependency array.","Identifier",["121"],"React Hook useEffect has a missing dependency: 'reservation_id'. Either include it or remove the dependency array.","ArrayExpression",["122"],"no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat",["123"],["124"],"no-global-assign","no-unsafe-negation",{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},{"desc":"125","fix":"129"},{"desc":"125","fix":"130"},"Update the dependencies array to be: [loadDashboard]",{"range":"131","text":"132"},"Update the dependencies array to be: [reservation_id]",{"range":"133","text":"134"},{"range":"135","text":"132"},{"range":"136","text":"132"},[627,633],"[loadDashboard]",[1674,1676],"[reservation_id]",[290,292],[885,887]]